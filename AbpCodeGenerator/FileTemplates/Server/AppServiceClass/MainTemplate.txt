using Abp.Application.Services;
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.EntityFrameworkCore;
using Abp.Linq.Extensions;
using Microsoft.EntityFrameworkCore;
using NewAliExpress.Authorization;
using NewAliExpress.DbEntity;
using NewAliExpress.EntityFrameworkCore;
using NewAliExpress.{{Entity_Name_Plural_Here}}s.Dtos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {{Namespace_Here}}.{{Entity_Name_Plural_Here}}s
{
	[AbpAuthorize({{Permission_Name_Here}}.Node)]
	public class {{Entity_Name_Plural_Here}}AppService : AsyncCrudAppService<{{Entity_Name_Plural_Here}},{{Entity_Name_Plural_Here}}DtoOut,{{Primary_Key_With_Comma_Here}},GetAll{{Entity_Name_Plural_Here}}Input, Create{{Entity_Name_Plural_Here}}Input,Update{{Entity_Name_Plural_Here}}Input,Get{{Entity_Name_Plural_Here}}Input,Delete{{Entity_Name_Plural_Here}}Input>,I{{Entity_Name_Plural_Here}}AppService
	{
		private readonly IDbContextProvider<{{DbContextName}}> dbcontextProvider;

		public {{Entity_Name_Plural_Here}}AppService(IRepository<{{Entity_Name_Plural_Here}},{{Primary_Key_With_Comma_Here}}> repositoryStudnet, IDbContextProvider<{{DbContextName}}> dbcontextProvider)
			:base(repositoryStudnet)
		{
			this.dbcontextProvider = dbcontextProvider;
		}
		protected override IQueryable<{{Entity_Name_Plural_Here}}> CreateFilteredQuery(GetAll{{Entity_Name_Plural_Here}}Input input)
		{
			return base.CreateFilteredQuery(input);
		}

		/// <summary>
		/// 异步获取单个 {{Entity_Name_Plural_Here}}
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		[AbpAuthorize({{Permission_Name_Here}}.Query)]
		public override Task<{{Entity_Name_Plural_Here}}DtoOut> GetAsync(Get{{Entity_Name_Plural_Here}}Input input)
		{
			return base.GetAsync(input);
		} 

		/// <summary>
		/// 异步查询分页 {{Entity_Name_Plural_Here}}
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		[AbpAuthorize({{Permission_Name_Here}}.Query)]
		public override async Task<PagedResultDto<{{Entity_Name_Plural_Here}}DtoOut>> GetAllAsync(GetAll{{Entity_Name_Plural_Here}}Input input)
		{
			return await base.GetAllAsync(input);
		}

		/// <summary>
		/// 异步创建 {{Entity_Name_Plural_Here}}
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		[AbpAuthorize({{Permission_Name_Here}}.Create)]
		public override async Task<{{Entity_Name_Plural_Here}}DtoOut> CreateAsync(Create{{Entity_Name_Plural_Here}}Input input)
		{
			return await base.CreateAsync(input);
		}

		/// <summary>
		/// 异步修改 {{Entity_Name_Plural_Here}}
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		[AbpAuthorize({{Permission_Name_Here}}.Query,{{Permission_Name_Here}}.Edit)]
		public override async Task<{{Entity_Name_Plural_Here}}DtoOut> UpdateAsync(Update{{Entity_Name_Plural_Here}}Input input)
		{
			return await base.UpdateAsync(input);
		}

		/// <summary>
		/// 异步删除 {{Entity_Name_Plural_Here}}
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		[AbpAuthorize({{Permission_Name_Here}}.Delete)]
		public override Task DeleteAsync(Delete{{Entity_Name_Plural_Here}}Input input)
		{
			return base.DeleteAsync(input);
		}


	}
}
